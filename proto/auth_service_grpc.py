# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: proto/auth_service.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import proto.db_models_pb2
import proto.auth_service_pb2


class AuthBase(abc.ABC):

    @abc.abstractmethod
    async def Login(self, stream: 'grpclib.server.Stream[proto.auth_service_pb2.LoginRequest, proto.auth_service_pb2.LoginResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SignUp(self, stream: 'grpclib.server.Stream[proto.auth_service_pb2.SignUpRequest, proto.auth_service_pb2.SignUpResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/socialnetwork.Auth/Login': grpclib.const.Handler(
                self.Login,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.auth_service_pb2.LoginRequest,
                proto.auth_service_pb2.LoginResponse,
            ),
            '/socialnetwork.Auth/SignUp': grpclib.const.Handler(
                self.SignUp,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.auth_service_pb2.SignUpRequest,
                proto.auth_service_pb2.SignUpResponse,
            ),
        }


class AuthStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Login = grpclib.client.UnaryUnaryMethod(
            channel,
            '/socialnetwork.Auth/Login',
            proto.auth_service_pb2.LoginRequest,
            proto.auth_service_pb2.LoginResponse,
        )
        self.SignUp = grpclib.client.UnaryUnaryMethod(
            channel,
            '/socialnetwork.Auth/SignUp',
            proto.auth_service_pb2.SignUpRequest,
            proto.auth_service_pb2.SignUpResponse,
        )
